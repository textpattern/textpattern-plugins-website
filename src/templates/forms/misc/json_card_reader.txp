<txp:php>
/**
 * Reads the JSON cards from curated plugins list, generates various Textpattern
 * variables for use within individual plugin details pages.
 *
 * Expected variables:
 *
 * <txp:variable name="json-name" /> (name of plugin, including author prefix)
 * <txp:variable name="json-latest-version" /> (latest semver release, including beta)
 *
 * Possible variables:
 *
 * <txp:variable name="json-repo-XXX" /> (where XXX is either homepage, bitbucket, github, gitlab - variable stores URL of project at that repo)
 * <txp:variable name="json-require-plugin" /> (name of a plugin this plugin requires to be installed)
 * <txp:variable name="json-require-match" /> (version match text of plugin this plugin requires to be installed)
 * <txp:variable name="json-require-version" /> (version a plugin this plugin requires to be installed)
 * <txp:variable name="json-beta-version" /> (latest semver of beta release)
 * <txp:variable name="json-beta-manifest" /> (does plugin beta release have a manifest.json file?)
 * <txp:variable name="json-beta-date" /> (date of latest PHP download beta release)
 * <txp:variable name="json-beta-php" /> (URL of latest PHP download beta release)
 * <txp:variable name="json-beta-txt" /> (URL of latest TXT download beta release)
 * <txp:variable name="json-stable-version" /> (latest semver of stable release)
 * <txp:variable name="json-stable-manifest" /> (does plugin beta release have a manifest.json file?)
 * <txp:variable name="json-stable-date" /> (date of latest PHP download stable release)
 * <txp:variable name="json-stable-php" /> (URL of latest PHP download stable release)
 * <txp:variable name="json-stable-txt" /> (URL of latest TXT download stable release)
 * <txp:variable name="json-latest-is-beta" /> (set if beta version is a higher semver than stable version)
 */

global $gotFile;
global $json;

$file = 'library-of-plugins/'.parse('<txp:article_url_title escape="json" />').'.json';

if (is_readable($file)) {
    $gotFile = file_get_contents($file);
    $json = json_decode($gotFile);
    $vars = array();

    if (!empty($json->name)) {
        $vars['name'] = '<txp:variable name="json-name">'.txpspecialchars($json->name).'</txp:variable>';
    }

    if (!empty($json->repositories)) {
        foreach ($json->repositories as $repo) {
            $safeType = txpspecialchars($repo->repoType);
            $safeURL = txpspecialchars($repo->repoUrl);
            $vars[] = '<txp:variable name="json-repo-'.$safeType.'">'.$safeURL.'</txp:variable>';
        }
    }

    if (!empty($json->require)) {
        foreach ($json->require as $rplug => $rver) {
            $vars['require-plug-name'] = '<txp:variable name="json-require-plugin">'.txpspecialchars($rplug).'</txp:variable>';

            preg_match('/([\<\=\>]+)?([\d.]+)/', $rver, $matches);
            $matchType = 'equal';

            switch ($matches[1]) {
                case '>':
                    $matchType = 'greater than';
                    break;
                case '>=':
                    $matchType = 'at least';
                    break;
                case '<':
                    $matchType = 'less than';
                    break;
                case '<=':
                    $matchType = 'no greater than';
                    break;
                case '=':
                default:
                    $matchType = 'equal';
                    break;
            }

            $plain_ver = $matches[2];

            $vars['require-plug-match'] = '<txp:variable name="json-require-match">'.txpspecialchars($matchType).'</txp:variable>';
            $vars['require-plug-version'] = '<txp:variable name="json-require-version">'.txpspecialchars($plain_ver).'</txp:variable>';
        }
    }

    if (!empty($json->beta)) {
        $vars['beta-version'] = '<txp:variable name="json-beta-version">'.txpspecialchars($json->beta->version).'</txp:variable>';

        if (!empty($json->beta->phpHasManifest)) {
            $vars['beta-manifest'] = '<txp:variable name="json-beta-manifest">'.txpspecialchars($json->beta->phpHasManifest).'</txp:variable>';
        }

        if (!empty($json->beta->datePublished)) {
            $vars['beta-version-date'] = '<txp:variable name="json-beta-date">'.txpspecialchars($json->beta->datePublished).'</txp:variable>';
        }

        if (!empty($json->beta->downloadUrlPhp)) {
            $vars['beta-version-php'] = '<txp:variable name="json-beta-php">'.txpspecialchars($json->beta->downloadUrlPhp).'</txp:variable>';
        }

        if (!empty($json->beta->downloadUrlTxt)) {
            $vars['beta-version-txt'] = '<txp:variable name="json-beta-txt">'.txpspecialchars($json->beta->downloadUrlTxt).'</txp:variable>';
        }
    }

    if (!empty($json->stable)) {
        $vars['stable-version'] = '<txp:variable name="json-stable-version">'.txpspecialchars($json->stable->version).'</txp:variable>';

        if (!empty($json->stable->phpHasManifest)) {
            $vars['stable-manifest'] = '<txp:variable name="json-stable-manifest">'.txpspecialchars($json->stable->phpHasManifest).'</txp:variable>';
        }

        if (!empty($json->stable->datePublished)) {
            $vars['stable-version-date'] = '<txp:variable name="json-stable-date">'.txpspecialchars($json->stable->datePublished).'</txp:variable>';
        }

        if (!empty($json->stable->downloadUrlPhp)) {
            $vars['stable-version-php'] = '<txp:variable name="json-stable-php">'.txpspecialchars($json->stable->downloadUrlPhp).'</txp:variable>';
        }

        if (!empty($json->stable->downloadUrlTxt)) {
            $vars['stable-version-txt'] = '<txp:variable name="json-stable-txt">'.txpspecialchars($json->stable->downloadUrlTxt).'</txp:variable>';
        }
    }

    if (!empty($json->stable->version) && !empty($json->beta->version)) {
        if (($result = version_compare($json->beta->version, $json->stable->version)) > 0) {
            $vars['latest-is-beta'] = '<txp:variable name="json-latest-is-beta" value="1" />';
            $vars['latest'] = '<txp:variable name="json-latest">'.txpspecialchars($json->beta->version).'</txp:variable>';
        } else {
            $vars['latest'] = '<txp:variable name="json-latest">'.txpspecialchars($json->stable->version).'</txp:variable>';
        }
    } elseif (!empty($json->stable->version)) {
        $vars['latest'] = '<txp:variable name="json-latest">'.txpspecialchars($json->stable->version).'</txp:variable>';
    } elseif (!empty($json->beta->version)) {
        $vars['latest'] = '<txp:variable name="json-latest">'.txpspecialchars($json->beta->version).'</txp:variable>';
    }

    parse(implode(n, $vars));
}
</txp:php>
